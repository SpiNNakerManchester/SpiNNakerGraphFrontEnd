import logging
from enum import Enum
from spinn_utilities.overrides import overrides
from pacman.model.graphs.machine import MachineVertex
from pacman.model.resources import (
    ConstantSDRAM, CPUCyclesPerTickResource, DTCMResource, ResourceContainer)
from spinn_front_end_common.utilities import globals_variables
from spinn_front_end_common.abstract_models.impl import (
    MachineDataSpecableVertex)
from spinn_front_end_common.interface.buffer_management.buffer_models import (
    AbstractReceiveBuffersToHost)
from spinn_front_end_common.interface.buffer_management.recording_utilities \
    import (
        get_recording_resources, get_recording_header_array,
        get_recording_header_size)
from spinn_front_end_common.utilities.constants import SYSTEM_BYTES_REQUIREMENT
from spinn_front_end_common.utilities.helpful_functions import (
    locate_memory_region_for_placement, read_config_int)
from spinnaker_graph_front_end.utilities import SimulatorVertex
from spinnaker_graph_front_end.utilities.data_utils import (
    generate_system_data_region)

logger = logging.getLogger(__name__)

PARTITION_ID = "DATA"


class TemplateVertex(
        SimulatorVertex, MachineDataSpecableVertex,
        AbstractReceiveBuffersToHost):

    # The number of bytes for the has_key flag and the key
    TRANSMISSION_REGION_N_BYTES = 2 * 4

    # TODO: Update with the regions of the application
    DATA_REGIONS = Enum(
        value="DATA_REGIONS",
        names=[('SYSTEM', 0),
               ('TRANSMISSION', 1),
               ('RECORDED_DATA', 2)])

    def __init__(self, label, constraints=None):
        super(TemplateVertex, self).__init__(
            label=label, binary_name="c_template_vertex.aplx",
            constraints=constraints)

        self._recording_size = 5000

        config = globals_variables.get_simulator().config
        self._buffer_size_before_receive = None
        if config.getboolean("Buffers", "enable_buffered_recording"):
            self._buffer_size_before_receive = config.getint(
                "Buffers", "buffer_size_before_receive")
        self._time_between_requests = config.getint(
            "Buffers", "time_between_requests")
        self._receive_buffer_host = config.get(
            "Buffers", "receive_buffer_host")
        self._receive_buffer_port = read_config_int(
            config, "Buffers", "receive_buffer_port")

        self.placement = None

    @property
    @overrides(MachineVertex.resources_required)
    def resources_required(self):
        resources = ResourceContainer(
            cpu_cycles=CPUCyclesPerTickResource(45),
            dtcm=DTCMResource(100),
            sdram=ConstantSDRAM(
                SYSTEM_BYTES_REQUIREMENT + self.TRANSMISSION_REGION_N_BYTES))
        resources.extend(get_recording_resources(
            [self._recording_size], self._receive_buffer_host,
            self._receive_buffer_port))
        return resources

    @overrides(MachineDataSpecableVertex.generate_machine_data_specification)
    def generate_machine_data_specification(
            self, spec, placement, machine_graph, routing_info, iptags,
            reverse_iptags, machine_time_step, time_scale_factor):
        """ Generate data

        :param placement: the placement object for the dsg
        :param machine_graph: the graph object for this dsg
        :param routing_info: the routing info object for this dsg
        :param iptags: the collection of iptags generated by the tag allocator
        :param reverse_iptags: the collection of reverse iptags generated by\
                the tag allocator
        """
        # Note the placement now that we know it!
        self.placement = placement

        # Generate the system data region for simulation .c requirements
        generate_system_data_region(spec, self.DATA_REGIONS.SYSTEM.value,
                                    self, machine_time_step, time_scale_factor)

        # Generate the application data regions
        self._reserve_app_memory_regions(spec)
        self._write_app_memory_regions(spec, routing_info, iptags)

        # End-of-Spec:
        spec.end_specification()

    def _reserve_app_memory_regions(self, spec):
        spec.reserve_memory_region(
            region=self.DATA_REGIONS.TRANSMISSION.value,
            size=self.TRANSMISSION_REGION_N_BYTES, label="transmission")
        spec.reserve_memory_region(
            region=self.DATA_REGIONS.RECORDED_DATA.value,
            size=get_recording_header_size(1),
            label="recording")

    def _write_app_memory_regions(self, spec, routing_info, iptags):
        # Get the key, assuming all outgoing edges use the same key
        key = routing_info.get_first_key_from_pre_vertex(self, PARTITION_ID)

        # Write the transmission region
        spec.switch_write_focus(self.DATA_REGIONS.TRANSMISSION.value)
        spec.write_value(int(key is not None))
        spec.write_value(0 if key is None else key)

        # write recording data interface
        spec.switch_write_focus(self.DATA_REGIONS.RECORDED_DATA.value)
        spec.write_array(get_recording_header_array(
            [self._recording_size], self._time_between_requests,
            self._buffer_size_before_receive, iptags))

    def read(self, placement, buffer_manager):
        """ Get the recorded data

        :param placement: the location of this vertex
        :param buffer_manager: the buffer manager
        :return: The data read, as bytes
        """
        data_pointer, is_missing_data = buffer_manager.get_data_for_vertex(
            placement, 0)
        if is_missing_data:
            logger.warning("Some data was lost when recording")
        return data_pointer.read_all()

    @overrides(AbstractReceiveBuffersToHost.get_recorded_region_ids)
    def get_recorded_region_ids(self):
        return [0]

    @overrides(AbstractReceiveBuffersToHost.get_recording_region_base_address)
    def get_recording_region_base_address(self, txrx, placement):
        return locate_memory_region_for_placement(
            placement, self.DATA_REGIONS.RECORDED_DATA.value, txrx)
